// This file is autogenerated. Do not edit it
package com.popovanton0.kira.generated.registry_generation

import com.popovanton0.kira.suppliers.BooleanSupplierBuilder
import com.popovanton0.kira.suppliers.Kira
import com.popovanton0.kira.suppliers.KiraProvider
import com.popovanton0.kira.suppliers.StringSupplierBuilder
import com.popovanton0.kira.suppliers.base.Supplier
import com.popovanton0.kira.suppliers.boolean
import com.popovanton0.kira.suppliers.compound.GeneratedKiraScopeWithImpls
import com.popovanton0.kira.suppliers.compound.injector
import com.popovanton0.kira.suppliers.kira
import com.popovanton0.kira.suppliers.string
import kotlin.Boolean
import kotlin.String
import kotlin.collections.List
import kotlin.collections.listOf
import registry_generation.ExampleFunction1

public class Kira_ExampleFunction1() : KiraProvider<ExampleFunction1Scope> {
  public override val kira: Kira<ExampleFunction1Scope> = kira(ExampleFunction1Scope()) {
    param1 = string(paramName = "param1", defaultValue = "Lorem")
    param2 = boolean(paramName = "param2", defaultValue = false)
    injector {
      ExampleFunction1(
        param1 = param1.currentValue(),
        param2 = param2.currentValue(),
      )
    }
  }

}

public class ExampleFunction1Scope :
    GeneratedKiraScopeWithImpls<ExampleFunction1Scope.SupplierImplsScope>() {
  protected override val `$$$supplierImplsScope$$$`: SupplierImplsScope = SupplierImplsScope(this)

  public lateinit var param1: Supplier<String>

  public lateinit var param2: Supplier<Boolean>

  public override fun collectSuppliers(): List<Supplier<*>> = listOf(param1, param2, )

  public class SupplierImplsScope(
    private val scope: ExampleFunction1Scope,
  ) : GeneratedKiraScopeWithImpls.SupplierImplsScope() {
    public var param1: StringSupplierBuilder
      get() = scope.param1 as? StringSupplierBuilder ?: implChanged()
      set(`value`) {
        scope.param1 = value
      }

    public var param2: BooleanSupplierBuilder
      get() = scope.param2 as? BooleanSupplierBuilder ?: implChanged()
      set(`value`) {
        scope.param2 = value
      }
  }
}
