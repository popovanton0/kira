// This file is autogenerated. Do not edit it
package com.popovanton0.kira.generated.functions_with_strange_param_names

import com.popovanton0.kira.suppliers.BooleanSupplierBuilder
import com.popovanton0.kira.suppliers.Kira
import com.popovanton0.kira.suppliers.KiraMisses
import com.popovanton0.kira.suppliers.KiraProvider
import com.popovanton0.kira.suppliers.base.Supplier
import com.popovanton0.kira.suppliers.boolean
import com.popovanton0.kira.suppliers.compound.GeneratedKiraScopeWithImpls
import com.popovanton0.kira.suppliers.compound.KiraScope
import com.popovanton0.kira.suppliers.compound.injector
import com.popovanton0.kira.suppliers.kira
import functions_with_strange_param_names.ExampleFunction2
import kotlin.Boolean
import kotlin.Throwable
import kotlin.collections.List
import kotlin.collections.listOf

public class Kira_ExampleFunction2(
  private val missesProvider: KiraScope.() -> Misses,
) : KiraProvider<ExampleFunction2Scope> {
  private val misses: Misses = KiraScope().missesProvider()

  public override val kira: Kira<ExampleFunction2Scope> = kira(ExampleFunction2Scope()) {
    misses = boolean(paramName = "misses", defaultValue = false)
    missesProvider = boolean(paramName = "missesProvider", defaultValue = false)
    kira = boolean(paramName = "kira", defaultValue = false)
    injector = boolean(paramName = "injector", defaultValue = false)
    string = boolean(paramName = "string", defaultValue = false)
    Supplier = boolean(paramName = "Supplier", defaultValue = false)
    ExampleFunction2 = boolean(paramName = "ExampleFunction2", defaultValue = false)
    functions_with_strange_names = boolean(paramName = "functions_with_strange_names", defaultValue
        = false)
    BooleanSupplierBuilder = boolean(paramName = "BooleanSupplierBuilder", defaultValue = false)
    scope = boolean(paramName = "scope", defaultValue = false)
    `scope$` = boolean(paramName = "scope${'$'}", defaultValue = false)
    Throwable = boolean(paramName = "Throwable", defaultValue = false)
    supplierImplsScope = boolean(paramName = "supplierImplsScope", defaultValue = false)
    collectSuppliers = boolean(paramName = "collectSuppliers", defaultValue = false)
    suppliers = boolean(paramName = "suppliers", defaultValue = false)
    `value` = boolean(paramName = "value", defaultValue = false)
    sdf = this@Kira_ExampleFunction2.misses.sdf
    injector {
      ExampleFunction2(
        misses = misses.currentValue(),
        missesProvider = missesProvider.currentValue(),
        kira = kira.currentValue(),
        injector = injector.currentValue(),
        string = string.currentValue(),
        Supplier = Supplier.currentValue(),
        ExampleFunction2 = ExampleFunction2.currentValue(),
        functions_with_strange_names = functions_with_strange_names.currentValue(),
        BooleanSupplierBuilder = BooleanSupplierBuilder.currentValue(),
        scope = scope.currentValue(),
        `scope$` = `scope$`.currentValue(),
        Throwable = Throwable.currentValue(),
        supplierImplsScope = supplierImplsScope.currentValue(),
        collectSuppliers = collectSuppliers.currentValue(),
        suppliers = suppliers.currentValue(),
        `value` = `value`.currentValue(),
        sdf = this@Kira_ExampleFunction2.misses.sdf.currentValue(),
      )
    }
  }


  public data class Misses(
    public val sdf: Supplier<Throwable>,
  ) : KiraMisses
}

public class ExampleFunction2Scope :
    GeneratedKiraScopeWithImpls<ExampleFunction2Scope.SupplierImplsScope>() {
  protected override val `$$$supplierImplsScope$$$`: SupplierImplsScope = SupplierImplsScope(this)

  public lateinit var misses: Supplier<Boolean>

  public lateinit var missesProvider: Supplier<Boolean>

  public lateinit var kira: Supplier<Boolean>

  public lateinit var injector: Supplier<Boolean>

  public lateinit var string: Supplier<Boolean>

  public lateinit var Supplier: Supplier<Boolean>

  public lateinit var ExampleFunction2: Supplier<Boolean>

  public lateinit var functions_with_strange_names: Supplier<Boolean>

  public lateinit var BooleanSupplierBuilder: Supplier<Boolean>

  public lateinit var scope: Supplier<Boolean>

  public lateinit var `scope$`: Supplier<Boolean>

  public lateinit var Throwable: Supplier<Boolean>

  public lateinit var supplierImplsScope: Supplier<Boolean>

  public lateinit var collectSuppliers: Supplier<Boolean>

  public lateinit var suppliers: Supplier<Boolean>

  public lateinit var `value`: Supplier<Boolean>

  public lateinit var sdf: Supplier<Throwable>

  public override fun collectSuppliers(): List<Supplier<*>> = listOf(misses, missesProvider, kira,
      injector, string, Supplier, ExampleFunction2, functions_with_strange_names,
      BooleanSupplierBuilder, scope, `scope$`, Throwable, supplierImplsScope, collectSuppliers,
      suppliers, `value`, sdf, )

  public class SupplierImplsScope(
    private val `scope$$`: ExampleFunction2Scope,
  ) : GeneratedKiraScopeWithImpls.SupplierImplsScope() {
    public var misses: BooleanSupplierBuilder
      get() = `scope$$`.misses as? BooleanSupplierBuilder ?: implChanged()
      set(`value`) {
        `scope$$`.misses = value
      }

    public var missesProvider: BooleanSupplierBuilder
      get() = `scope$$`.missesProvider as? BooleanSupplierBuilder ?: implChanged()
      set(`value`) {
        `scope$$`.missesProvider = value
      }

    public var kira: BooleanSupplierBuilder
      get() = `scope$$`.kira as? BooleanSupplierBuilder ?: implChanged()
      set(`value`) {
        `scope$$`.kira = value
      }

    public var injector: BooleanSupplierBuilder
      get() = `scope$$`.injector as? BooleanSupplierBuilder ?: implChanged()
      set(`value`) {
        `scope$$`.injector = value
      }

    public var string: BooleanSupplierBuilder
      get() = `scope$$`.string as? BooleanSupplierBuilder ?: implChanged()
      set(`value`) {
        `scope$$`.string = value
      }

    public var Supplier: BooleanSupplierBuilder
      get() = `scope$$`.Supplier as? BooleanSupplierBuilder ?: implChanged()
      set(`value`) {
        `scope$$`.Supplier = value
      }

    public var ExampleFunction2: BooleanSupplierBuilder
      get() = `scope$$`.ExampleFunction2 as? BooleanSupplierBuilder ?: implChanged()
      set(`value`) {
        `scope$$`.ExampleFunction2 = value
      }

    public var functions_with_strange_names: BooleanSupplierBuilder
      get() = `scope$$`.functions_with_strange_names as? BooleanSupplierBuilder ?: implChanged()
      set(`value`) {
        `scope$$`.functions_with_strange_names = value
      }

    public var BooleanSupplierBuilder: BooleanSupplierBuilder
      get() = `scope$$`.BooleanSupplierBuilder as? BooleanSupplierBuilder ?: implChanged()
      set(`value`) {
        `scope$$`.BooleanSupplierBuilder = value
      }

    public var scope: BooleanSupplierBuilder
      get() = `scope$$`.scope as? BooleanSupplierBuilder ?: implChanged()
      set(`value`) {
        `scope$$`.scope = value
      }

    public var `scope$`: BooleanSupplierBuilder
      get() = `scope$$`.`scope$` as? BooleanSupplierBuilder ?: implChanged()
      set(`value`) {
        `scope$$`.`scope$` = value
      }

    public var Throwable: BooleanSupplierBuilder
      get() = `scope$$`.Throwable as? BooleanSupplierBuilder ?: implChanged()
      set(`value`) {
        `scope$$`.Throwable = value
      }

    public var supplierImplsScope: BooleanSupplierBuilder
      get() = `scope$$`.supplierImplsScope as? BooleanSupplierBuilder ?: implChanged()
      set(`value`) {
        `scope$$`.supplierImplsScope = value
      }

    public var collectSuppliers: BooleanSupplierBuilder
      get() = `scope$$`.collectSuppliers as? BooleanSupplierBuilder ?: implChanged()
      set(`value`) {
        `scope$$`.collectSuppliers = value
      }

    public var suppliers: BooleanSupplierBuilder
      get() = `scope$$`.suppliers as? BooleanSupplierBuilder ?: implChanged()
      set(`value`) {
        `scope$$`.suppliers = value
      }

    public var `value`: BooleanSupplierBuilder
      get() = `scope$$`.`value` as? BooleanSupplierBuilder ?: implChanged()
      set(`value`) {
        `scope$$`.`value` = value
      }
  }
}
