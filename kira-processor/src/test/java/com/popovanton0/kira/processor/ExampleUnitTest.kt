package com.popovanton0.kira.processor

import com.popovanton0.kira.processing.KiraProcessorProvider
import com.tschuchort.compiletesting.KotlinCompilation
import com.tschuchort.compiletesting.SourceFile
import com.tschuchort.compiletesting.kspSourcesDir
import com.tschuchort.compiletesting.symbolProcessorProviders
import org.junit.Assert.assertEquals
import org.junit.Test
import java.io.File

public class ExampleUnitTest {
    class TestEnvClass

    @Test
    fun `test my annotation processor`() {
        val kotlinSource = SourceFile.kotlin(
            "KClass.kt", """
                class KClass {
                    fun foo() {
                        // Classes from the test environment are visible to the compiled sources
                        val testEnvClass = TestEnvClass() 
                    }
                }
                fun main() { 
                    KClass()
                }
            """
        )

        val compilation = KotlinCompilation().apply {
            sources = listOf(kotlinSource)
            symbolProcessorProviders = listOf(KiraProcessorProvider())
            inheritClassPath = true
        }
        val result = compilation.compile()

        val files = compilation.sourcesGeneratedBySymbolProcessor
        files.first().readText()
        assertEquals(KotlinCompilation.ExitCode.OK, result.exitCode)
    }
}

/**
 * 	Intermediate source and resource files generated by the symbol processor that will be compiled
 * 	in the next steps.
 */
val KotlinCompilation.sourcesGeneratedBySymbolProcessor: List<File>
    get() = kspSourcesDir.listFilesRecursively()

internal fun File.listFilesRecursively(): List<File> {
    return listFiles().flatMap { file ->
        if (file.isDirectory)
            file.listFilesRecursively()
        else
            listOf(file)
    }
}